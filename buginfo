#!/bin/bash

# Define colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# Device selection logic
echo "Devices available:"
DEVICES=$(adb devices -l | grep -v "List of devices attached" | grep -v "^$")
echo "$DEVICES"

if [ -z "$DEVICES" ]; then
    echo "Error: No devices connected."
    exit 1
fi

# Prepare arrays to map serial numbers to device names
DEVICE_LIST=()
DEVICE_NAMES=()

# Populate the arrays with serial numbers and device names
while IFS= read -r line; do
    SERIAL=$(echo "$line" | awk '{print $1}')
    if [ -n "$SERIAL" ]; then
        DEVICE_NAME=$(echo "$line" | sed -e "s/^[^ ]* \(.*\)$/\1/")
        DEVICE_LIST+=("$SERIAL")
        DEVICE_NAMES+=("$DEVICE_NAME")
    fi
done <<< "$DEVICES"

# Display devices and prompt for selection
if [ ${#DEVICE_LIST[@]} -gt 1 ]; then
    echo "Multiple devices connected. Please select one:"
    PS3="Enter the number of your choice: "
    select DEVICE_SERIAL in "${DEVICE_LIST[@]}"; do
        if [ -n "$DEVICE_SERIAL" ]; then
            for i in "${!DEVICE_LIST[@]}"; do
                if [ "${DEVICE_LIST[$i]}" = "$DEVICE_SERIAL" ]; then
                    DEVICE_NAME="${DEVICE_NAMES[$i]}"
                    break
                fi
            done
            echo "Selected device: $DEVICE_NAME ($DEVICE_SERIAL)"
            break
        else
            echo "Invalid selection. Please try again."
        fi
    done
elif [ ${#DEVICE_LIST[@]} -eq 1 ]; then
    # Single device case
    DEVICE_SERIAL="${DEVICE_LIST[0]}"
    DEVICE_NAME="${DEVICE_NAMES[0]}"
    echo "Only one device connected: $DEVICE_NAME ($DEVICE_SERIAL)"
else
    echo "Error: No devices available for selection."
    exit 1
fi

echo "Using device: $DEVICE_NAME ($DEVICE_SERIAL)"

# Define filenames with timestamps
timestamp=$(date +%Y%m%d_%H%M%S)
video_filename="/data/local/tmp/video_$timestamp.mp4"
log_filename="logcat_$timestamp.txt"
screenshot_filename="screenshot_$timestamp.png"

# Function to take a screenshot
take_screenshot() {
    timestamp=$(date +%Y%m%d_%H%M%S)
    screenshot_filename="screenshot_$timestamp.png"
    echo "Taking screenshot..."
    adb -s "$DEVICE_SERIAL" shell screencap -p /data/local/tmp/$screenshot_filename
    adb -s "$DEVICE_SERIAL" pull /data/local/tmp/$screenshot_filename . > /dev/null
    echo "Screenshot saved as $screenshot_filename"
}

# Function to start screen recording
start_screen_recording() {
    #!/bin/bash

echo "Do you want to start screen recording (y/n): "
read -p "" start_confirmation

if [[ $start_confirmation == "y" ]]; then
    echo "Starting screen recording..."
    adb -s "$DEVICE_SERIAL" shell screenrecord $video_filename &
    record_pid=$!
else
    echo "Exiting."
    exit 0
fi

}

# Function to stop screen recording
stop_screen_recording() {
    echo "Stopping screen recording..."
    adb -s "$DEVICE_SERIAL" shell pkill -SIGINT screenrecord
    sleep 10
    adb -s "$DEVICE_SERIAL" pull $video_filename . > /dev/null
    echo "Recording saved as $video_filename"
}

# Function to start logcat
start_logcat() {
    echo "Starting logcat..."
    adb -s "$DEVICE_SERIAL" logcat > $log_filename 2>&1 &
    logcat_pid=$!

}

# Function to stop logcat
stop_logcat() {
    echo "Stopping logcat..."
    kill -9 $logcat_pid
    echo "Logcat saved as $log_filename"
}

# Function to generate a bug report
generate_bug_report() {
    timestamp=$(date +%Y%m%d_%H%M%S)
    echo "Generating bug report..."
    adb -s "$DEVICE_SERIAL" bugreport > bugreport_$timestamp.txt
    echo "Bug report saved as bugreport_$timestamp.txt"
    exit 1
}

# Function to start cross reboot logs
cross_reboot_logs() {
    echo "Started cross reboot logs"
    printf "\033[0;31mCtrl+c\033[0m %s to stop cross reboot logs.\n"
   while true; do adb -s "$DEVICE_SERIAL" logcat | tee -a crosslogs.txt;
echo "==========REBOOT============" >>   crosslogs.txt;
done > /dev/null 2>&1

  
}

# Device_Info
Device_info() {
Device_fingerprint=$(adb -s "$DEVICE_SERIAL" shell getprop | grep ro.build.fingerprint)
            Android_Version=$(adb -s "$DEVICE_SERIAL" shell getprop ro.build.version.release)
            Playstore_version=$(adb -s "$DEVICE_SERIAL" shell dumpsys package com.android.vending | grep versionName | head -1 | cut -d'=' -f2)
            hardware_version=$(adb -s "$DEVICE_SERIAL" shell getprop ro.boot.hardware.revision)
            Moduemetadata_version=$(adb -s "$DEVICE_SERIAL" shell dumpsys package com.google.android.modulemetadata | grep -E "versionCode" | awk -F 'versionCode=' '{print $2}' | awk -F ' ' '{print $1}' | sort -nr | head -n 1)
            printf "\033[0;31mDevice Fingerprint:\033[0m %s\n" "$Device_fingerprint"
            printf "\033[0;31mAndroid Version:\033[0m %s\n" "$Android_Version"
            printf "\033[0;31mPlaystore Version:\033[0m %s\n" "$Playstore_version"
            printf "\033[0;31mHardware Version:\033[0m %s\n" "$hardware_version"
            printf "\033[0;31mModulemetadata version:\033[0m %s\n" "$Moduemetadata_version"
           
}

push() {
#!/bin/bash

# Function to install fzf (for Linux and macOS)
install_fzf() {
    echo "fzf not found. Installing fzf..."

    # Check if the system is Linux or macOS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux (Debian/Ubuntu)
        sudo apt-get update
        sudo apt-get install -y fzf
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        brew install fzf
    else
        echo "Automatic installation of fzf is not supported for this OS. Please install manually."
        exit 1
    fi
}

# Function to navigate directories interactively and select a file
navigate_directories() {
    local current_dir="/storage/emulated/0"  # Starting point in Android
    local selected_item=""

    # List files and directories recursively from the starting directory
    while true; do
        # Use adb to list files and directories in the current directory (including hidden files)
        selected_item=$(adb shell "ls -a -p $current_dir" | fzf --multi --preview "adb shell ls -l $current_dir/{}" --prompt="Press TAB to select multiple files: ")

        # If no selection is made (empty string or exit), exit
        if [ -z "$selected_item" ]; then
            echo "No file or directory selected. Exiting."
            exit 1  # exit the script if no valid selection
        fi

        # Clean up the selected items to avoid misinterpretation of invalid values
        selected_item=$(echo "$selected_item" | sed 's/^[ \t]*//;s/[ \t]*$//')  # trim leading/trailing spaces

        # Check if the selected item is something invalid (e.g., "No", "Exiting", or other prompt-related text)
        if [[ "$selected_item" == "Exiting" || "$selected_item" == "No" || "$selected_item" == "Press" || "$selected_item" == "Cancel" ]]; then
            echo "Invalid selection (cancelled). Exiting."
            exit 1
        fi

        # Check if the selected item is a directory
        if adb shell "ls -ld $current_dir/$selected_item" | cut -d' ' -f1 | grep -q '^d'; then
            # If it's a directory, go inside
            current_dir="$current_dir/$selected_item"
        else
            # If it's a file, break and return the full file path
            break
        fi
    done

    # Clean the path, ensuring no double path issues
    cleaned_path=$(echo "$current_dir/$selected_item" | sed 's|^/storage/emulated/0/|sdcard/|')

    # Remove any leading or trailing slashes to prevent double slashes in the path
    cleaned_path=$(echo "$cleaned_path" | sed 's|//|/|g')

    # Avoid double path prefix issues by ensuring that `sdcard/` is used consistently
    if [[ "$cleaned_path" == sdcard/* ]]; then
        # This is already the correct relative path, so just return it
        echo "$cleaned_path"
    else
        # If the path is not properly cleaned, use the full absolute path
        echo "$current_dir/$selected_item"
    fi
}

# Main Script Logic
if ! command -v fzf &> /dev/null; then
    # If fzf is not installed, attempt to install it
    echo "fzf is not installed. Installing fzf..."
    install_fzf
fi

# After ensuring fzf is installed, call navigate_directories
file_paths=$(navigate_directories)

# If no valid files are selected, don't proceed
if [ -z "$file_paths" ]; then
    echo "No file(s) selected. Exiting."
    exit 1
fi

echo "Pulling file(s) from device: $file_paths"

# Loop through each selected file and pull it one by one
for file_path in $file_paths; do
    # Check if the path is relative and needs the full directory path prepended
    if [[ "$file_path" != sdcard/* ]]; then
        # Prepend the correct path to the file (e.g., sdcard/DCIM/Camera/)
        file_path="sdcard/DCIM/Camera/$file_path"
    fi

    # Output the file being pulled
    echo "Pulling: $file_path"

    # Attempt to pull the file from the device
    adb -s "$DEVICE_SERIAL" pull "$file_path" || echo "Failed to pull $file_path"
done
}

pull() {
#!/bin/bash

# Function to select multiple files or directories from the laptop
select_multiple_files_or_directories_laptop() {
    # Function to display a directory and let the user select files/folders inside
    show_fzf_directory() {
        local current_dir="$1"

        # List the files and directories in the current directory
        selected=$(find "$current_dir" -maxdepth 1 -type f -o -type d | fzf --multi --preview "ls -l {1}" --prompt="For multi selection use tab ,to selct the folder itself after navugate to folder click ESC: ")

        # If no selection, return
        if [ -z "$selected" ]; then
            return
        fi

        # Add selected item(s) to the selected_items array
        for item in $selected; do
            selected_items+=("$item")
        done

        # Recurse into subdirectories if a directory is selected, without navigating automatically
        for item in $selected; do
            if [ -d "$item" ]; then
                # Recurse into subdirectories to select files inside
                show_fzf_directory "$item"
            fi
        done
    }

    # Start selection from the current directory
    selected_items=()
    show_fzf_directory "."

    # Check if any files or directories were selected
    if [ ${#selected_items[@]} -eq 0 ]; then
        echo "No files or directories selected. Exiting."
        exit 1
    fi

    # Display the selected items
    echo "Selected: ${selected_items[@]}"
}

# Function to let the user choose the target directory on the Android device
select_device_target_directory() {
    # Use adb to list files and directories on the Android device
    target_directory=$(adb shell "ls -d /storage/emulated/0/*" | fzf --prompt="Select target directory on the Android device: ")

    # Check if a valid directory was selected
    if [ -z "$target_directory" ]; then
        echo "No target directory selected. Exiting."
        exit 1
    fi

    echo "Target directory on Android: $target_directory"
}

# Function to push the selected files or directories to the Android device
push_files_or_directories_to_device() {
    # Loop through each selected item
    for selected_item in "${selected_items[@]}"; do
        # Ensure that the selected file or directory exists on the laptop
        if [ ! -e "$selected_item" ]; then
            echo "The selected item $selected_item does not exist on the laptop. Skipping."
            continue
        fi

        # Push the selected file or directory to the target directory on the Android device
        if [ -d "$selected_item" ]; then
            # If it's a directory, push it recursively
            echo "Pushing directory: $selected_item to $target_directory"
            adb push "$selected_item" "$target_directory/"
        else
            # If it's a file, push it to the target directory
            echo "Pushing file: $selected_item to $target_directory"
            adb push "$selected_item" "$target_directory/"
        fi

        # Check if the push was successful
        if [ $? -eq 0 ]; then
            echo "Successfully pushed $selected_item to $target_directory"
        else
            echo "Error pushing $selected_item to $target_directory"
        fi
    done
}

# Main script logic
echo "Welcome to the multi-selection file push script!"

# Step 1: Select multiple files or directories from the laptop
select_multiple_files_or_directories_laptop

# Step 2: Select the target directory on the Android device
select_device_target_directory

# Step 3: Push the selected files or directories to the Android device
push_files_or_directories_to_device

echo "Finished pushing the selected files or directories."
}


# Main menu for user selection
# Main menu for user selection
while true; do
    echo "Select the action to perform:"
    echo "1) Screen Recording"
    echo "2) Take Screenshot"
    echo "3) Cross reboot logs"
    echo "4) Logcat"
    echo "5) Bug Report"
    echo "6) Show Device Info"
    echo "7) Collect (Screen Recording, Screenshot, Logcat, Bug Report) Together"
    echo "8) pull the file from the device"
    echo "9) Push the file to the device"
    echo "10) Exit"

    read -p "Enter your choice (1-10): " choice
    case $choice in
        1)
            start_screen_recording
            printf "Tap \033[0;31m'x'\033[0m to stop Screen recording.\n"
            read -r -n1 key
            if [[ $key == "x" ]]; then
                stop_screen_recording
                exit 1
            else
                echo -e "${RED}Invalid input. Exiting.${NC}"
                exit 1
            fi
            ;;
        2)
            take_screenshot
            ;;
        3)
            cross_reboot_logs
            ;;
        4)
            start_logcat
            printf "Tap \033[0;31m'x'\033[0m to Stop Logcat.\n"
            read -r -n1 key
            if [[ $key == "x" ]]; then
                stop_logcat
                exit 1
            else
                echo -e "${RED}Invalid input. Exiting.${NC}"
                exit 1
            fi
            ;;
        5)
            generate_bug_report
            exit 1
            ;;
        6)
            Device_info
            exit 1
            ;;
        7)
            Device_info
            start_screen_recording
            start_logcat
            printf "Tap \033[0;31m's'\033[0m to take a screenshot.\n"
            printf "Tap \033[0;31m'x'\033[0m to stop Screen recording and Logcat.\n"

            while true; do
                read -r -n1 key  # Read a single character

                if [[ $key == 's' ]]; then
                    take_screenshot
                elif [[ $key == 'x' ]]; then
                    stop_screen_recording
                    stop_logcat
                    
                    echo "Do you want to take a bug report (y/n): "
                    read -p "" start_confirmation
                    
                    if [[ $start_confirmation == "y" ]]; then
                        trap 'exit' INT
                        generate_bug_report
                        exit 1
                    else
                        exit 1
                    fi
                    break
                fi
            done
            ;;
        8)
            push
            ;;
        9)
            pull
            ;;
        10)
            echo "Exiting."
            pkill -f screenrecord
            pkill -f logcat
            exit 0
            ;;
        *)
            echo "Invalid selection. Please try again."
            ;;
    esac
done

            ;;
    esac
done
